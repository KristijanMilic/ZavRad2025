def load_checkpoint(model, optimizer, path, device="cuda" if torch.cuda.is_available() else "cpu"):
    if not os.path.isfile(path):
        raise FileNotFoundError(f"[ERROR] Checkpoint file not found: {path}")
    checkpoint = torch.load(path, map_location=device)
    model.load_state_dict(checkpoint["model_state"])
    optimizer.load_state_dict(checkpoint["optimizer_state"])
    epoch = checkpoint.get("epoch", 0)
    print(f"[INFO] Loaded checkpoint from {path}, resuming at epoch {epoch}")
    return epoch


def save_tensor_image(tensor, path):
    os.makedirs(os.path.dirname(path), exist_ok=True)

    image_tensor = (tensor.clamp(-1, 1) + 1.0) / 2.0

    save_image(image_tensor, path)
    print(f"[INFO] Upscaled image saved to {path}")

def image_to_tensor(image, size=None):
    transform_list = []
    if size:
        transform_list.append(transforms.Resize(size))
    transform_list.extend([
        transforms.ToTensor(),  # [0, 1]
        transforms.Normalize((0.5, 0.5, 0.5),  # [-1, 1]
                             (0.5, 0.5, 0.5))
    ])
    transform = transforms.Compose(transform_list)
    return transform(image).unsqueeze(0)

def tensor_to_pil(tensor):
    tensor = (tensor.squeeze(0).clamp(-1, 1) + 1.0) / 2.0  # [0, 1]
    return transforms.ToPILImage()(tensor.cpu())